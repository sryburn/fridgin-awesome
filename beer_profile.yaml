# Enable JSON component
json:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key
  services:
    - service: apply_beer_profile
      variables:
        profile_json: string
      then:
        - lambda: |-           
            // Check for custom start time in JSON, otherwise use current time
            id(profile_start_time) = id(homeassistant_time).now().timestamp;
            
            // Parse start time from JSON if present
            json::parse_json(profile_json, [&](JsonObject root) {
              if (root.containsKey("start_time")) {
                id(profile_start_time) = root["start_time"].as<time_t>();
                ESP_LOGD("beer_profile", "Using custom start time: %ld", id(profile_start_time));
              }
              return true;
            });
            
            // Reset profile state
            id(profile_current_step) = 0;
            
            // Clear existing steps
            for (int i = 0; i < id(MAX_PROFILE_STEPS); i++) {
              id(profile_step_types)[i] = 0; // 0=none, 1=hold, 2=ramp
              id(profile_step_temps)[i] = 0;
              id(profile_step_durations)[i] = 0.0;
            }
            
            // Parse the profile steps from JSON
            int step_count = 0;
            json::parse_json(profile_json, [&](JsonObject root) {
              if (root["steps"].is<JsonArray>()) {
                JsonArray steps = root["steps"].as<JsonArray>();
                for (JsonObject step : steps) {
                  if (step_count >= id(MAX_PROFILE_STEPS)) {
                    ESP_LOGW("beer_profile", "Too many steps, truncating to %d", id(MAX_PROFILE_STEPS));
                    break;
                  }
                  
                  // Process step type and temperature
                  if (step.containsKey("type")) {
                    const char* type = step["type"];
                    
                    if (strcmp(type, "hold") == 0) {
                      id(profile_step_types)[step_count] = 1; // hold
                      if (step.containsKey("temperature")) {
                        id(profile_step_temps)[step_count] = step["temperature"];
                      }
                    } else if (strcmp(type, "ramp") == 0) {
                      id(profile_step_types)[step_count] = 2; // ramp
                      if (step.containsKey("target_temperature")) {
                        id(profile_step_temps)[step_count] = step["target_temperature"];
                      }
                    }
                    
                    // Process step duration
                    if (step.containsKey("duration_hours")) {
                      id(profile_step_durations)[step_count] = step["duration_hours"].as<float>();
                      
                      ESP_LOGD("beer_profile", "Step %d duration: %.3f hours (%.1f minutes)", 
                              step_count + 1, 
                              id(profile_step_durations)[step_count],
                              id(profile_step_durations)[step_count] * 60.0f);
                      
                      step_count++;
                    }
                  }
                }
              }
              return true;
            });
            
            id(profile_steps_count) = step_count;
            
            // Set initial temperature setpoint if profile has steps
            if (step_count > 0 && id(profile_step_types)[0] == 1) { // hold
              auto call = id(beer_set).make_call();
              call.set_value(id(profile_step_temps)[0]);
              call.perform();
            }
            
            // Update status displays
            id(beer_profile_status).publish_state("Active");
            id(beer_profile_step).publish_state("Starting profile...");
            
            // Generate compact JSON representation for Home Assistant (to keep within 254 character state limit)
            std::string compact_json = "{\"b\":";
            compact_json += std::to_string(id(profile_start_time));
            
            // Type array (y for types, h=hold, r=ramp)
            compact_json += ",\"y\":[";
            for (int i = 0; i < step_count; i++) {
              if (i > 0) compact_json += ",";
              compact_json += (id(profile_step_types)[i] == 1) ? "\"h\"" : "\"r\"";
            }
            compact_json += "]";
            
            // Temperature array
            compact_json += ",\"t\":[";
            for (int i = 0; i < step_count; i++) {
              if (i > 0) compact_json += ",";
              compact_json += std::to_string((int)id(profile_step_temps)[i]);
              
              // Add decimal part only if it's not a whole number
              float decimal_part = id(profile_step_temps)[i] - (int)id(profile_step_temps)[i];
              if (decimal_part > 0.01) {
                compact_json += "." + std::to_string((int)(decimal_part * 10));
              }
            }
            compact_json += "]";
            
            // Duration array
            compact_json += ",\"d\":[";
            for (int i = 0; i < step_count; i++) {
              if (i > 0) compact_json += ",";
              compact_json += std::to_string((int)id(profile_step_durations)[i]);
              
              // Add decimal part only if it's not a whole number
              float decimal_part = id(profile_step_durations)[i] - (int)id(profile_step_durations)[i];
              if (decimal_part > 0.01) {
                compact_json += "." + std::to_string((int)(decimal_part * 10));
              }
            }
            compact_json += "]}";
            
            // Log and check compact JSON length
            ESP_LOGD("beer_profile", "Compact JSON length: %d chars", compact_json.length());
            if (compact_json.length() > 254) {
              ESP_LOGW("beer_profile", "Compact JSON too long (%d chars), may be truncated", compact_json.length());
            }
            
            // Store and publish the compact JSON
            id(profile_compact_json) = compact_json;
            global_preferences->sync();
            id(beer_profile_chart_data).publish_state(compact_json);
            
            ESP_LOGD("beer_profile", "Generated compact profile JSON: %s", compact_json.c_str());
            ESP_LOGD("beer_profile", "Applied new profile with %d steps, starting at timestamp %ld", 
                    step_count, id(profile_start_time));
        # Call the profile calculation script immediately
        - script.execute: calculate_beer_profile

# Time component to track elapsed time properly
time:
  - platform: homeassistant
    id: homeassistant_time

# Define maximum steps in profile
# Storage for profile data
globals:
  - id: profile_start_time
    type: int
    restore_value: true
    initial_value: '0'
  - id: profile_current_step
    type: int
    restore_value: true
    initial_value: '0'
  - id: profile_steps_count
    type: int
    restore_value: true
    initial_value: '0'
  - id: MAX_PROFILE_STEPS
    type: int
    restore_value: false
    initial_value: '10'
  - id: profile_step_types
    type: int[10]
    restore_value: true
    initial_value: '{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}'
  - id: profile_step_temps
    type: float[10]
    restore_value: true
    initial_value: '{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}'
  - id: profile_step_durations
    type: float[10]  # Changed from int to float
    restore_value: true
    initial_value: '{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}'
  - id: profile_compact_json
    type: std::string  
    restore_value: true
    initial_value: '"{}"'
    max_restore_data_length: 254

# Create a script for the profile calculation
script:
  - id: calculate_beer_profile
    then:
      - lambda: |-
          ESP_LOGD("beer_profile", "profile_compact_json length: %d bytes", id(profile_compact_json).length());
          
          // Handle case with no profile data
          if (id(profile_steps_count) == 0) {
            id(beer_profile_status).publish_state("No profile");
            id(profile_elapsed_time).publish_state("--");
            id(profile_step_remaining_time).publish_state("--");
            id(beer_profile_chart_data).publish_state("{}");
            return;
          }
          
          // Handle paused profile due to mode change
          if (id(mode).state != "Profile") {
            id(beer_profile_status).publish_state("Paused");
            id(profile_elapsed_time).publish_state("--");
            id(profile_step_remaining_time).publish_state("--");
            
            // Still show the profile data in the chart
            if (!id(profile_compact_json).empty()) {
              id(beer_profile_chart_data).publish_state(id(profile_compact_json));
            }
            return;
          }
          
          // Calculate elapsed time
          time_t now = id(homeassistant_time).now().timestamp;
          uint32_t elapsed_seconds = now - id(profile_start_time);
          
          ESP_LOGD("beer_profile", "Profile time check - elapsed: %u seconds (%.2f hours)", 
                  elapsed_seconds, elapsed_seconds / 3600.0f);
          
          // Find current step based on elapsed time
          uint32_t step_start_seconds = 0;
          bool found_step = false;
          
          for (int i = 0; i < id(profile_steps_count); i++) {
            uint32_t step_duration_seconds = id(profile_step_durations)[i] * 3600.0f;
            uint32_t step_end_seconds = step_start_seconds + step_duration_seconds;
            
            ESP_LOGD("beer_profile", "Step %d: starts at %u seconds, ends at %u seconds (duration: %.1f minutes)", 
                    i + 1, step_start_seconds, step_end_seconds, id(profile_step_durations)[i] * 60.0f);
            
            if (elapsed_seconds >= step_start_seconds && elapsed_seconds < step_end_seconds) {
              // We're in this step
              if (id(profile_current_step) != i) {
                id(profile_current_step) = i;
                ESP_LOGD("beer_profile", "Moved to step %d", i + 1);
              }
              
              // Calculate target temperature
              int type = id(profile_step_types)[i];
              float target_temp = 20.0f;  // Default
              
              if (type == 1) { // hold
                target_temp = id(profile_step_temps)[i];
              } else if (type == 2) { // ramp
                // For RAMP: interpolate between previous and next temperature
                float prev_temp = (i > 0) ? id(profile_step_temps)[i-1] : 20.0f;
                float next_temp = id(profile_step_temps)[i];
                
                // Calculate position in ramp (0.0 to 1.0)
                float position = (float)(elapsed_seconds - step_start_seconds) / step_duration_seconds;
                
                // Linear interpolation 
                target_temp = prev_temp + position * (next_temp - prev_temp);
                target_temp = roundf(target_temp * 10.0f) / 10.0f;  // Round to 1 decimal place
                
                ESP_LOGD("beer_profile", "Ramp position: %.2f (%.1f°C to %.1f°C) = %.1f°C", 
                        position, prev_temp, next_temp, target_temp);
              }
              
              // Update setpoint
              auto call = id(beer_set).make_call();
              call.set_value(target_temp);
              call.perform();
              
              // Update step description
              char buffer[64];
              if (type == 1) { // hold
                sprintf(buffer, "Hold at %.1f°C for %.1f hours", 
                        id(profile_step_temps)[i], id(profile_step_durations)[i]);
              } else if (type == 2) { // ramp
                sprintf(buffer, "Ramp to %.1f°C over %.1f hours", 
                        id(profile_step_temps)[i], id(profile_step_durations)[i]);
              }
              id(beer_profile_step).publish_state(buffer);
              
              // Calculate and format remaining time for current step
              uint32_t step_elapsed_seconds = elapsed_seconds - step_start_seconds;
              uint32_t step_duration_minutes = (uint32_t)(id(profile_step_durations)[i] * 60.0f);
              uint32_t step_elapsed_minutes = step_elapsed_seconds / 60;
              uint32_t step_remaining_minutes = step_duration_minutes - step_elapsed_minutes;
              
              char remaining_buffer[64];
              if (step_remaining_minutes >= 1440) { // 24 hours in minutes
                uint32_t days = step_remaining_minutes / 1440;
                uint32_t remaining = step_remaining_minutes % 1440;
                uint32_t hours = remaining / 60;
                uint32_t minutes = remaining % 60;
                sprintf(remaining_buffer, "%dd %dh %dm", days, hours, minutes);
              } else if (step_remaining_minutes >= 60) {
                uint32_t hours = step_remaining_minutes / 60;
                uint32_t minutes = step_remaining_minutes % 60;
                sprintf(remaining_buffer, "%dh %dm", hours, minutes);
              } else {
                sprintf(remaining_buffer, "%dm", step_remaining_minutes);
              }
              
              id(profile_step_remaining_time).publish_state(remaining_buffer);
              
              ESP_LOGD("beer_profile", "Step time - Total: %u minutes, Elapsed: %u minutes, Remaining: %u minutes", 
                      step_duration_minutes, step_elapsed_minutes, step_remaining_minutes);
              
              found_step = true;
              break;
            }
            
            step_start_seconds = step_end_seconds;
          }
          
          // Handle profile completion
          if (!found_step) {
            if (id(profile_current_step) < id(profile_steps_count)) {
              id(profile_current_step) = id(profile_steps_count);
              ESP_LOGD("beer_profile", "Profile completed");
              
              // Keep the last temperature
              if (id(profile_steps_count) > 0) {
                int last_idx = id(profile_steps_count) - 1;
                auto call = id(beer_set).make_call();
                call.set_value(id(profile_step_temps)[last_idx]);
                call.perform();
              }
              
              id(beer_profile_step).publish_state("Profile complete");
              id(profile_step_remaining_time).publish_state("Complete");
            }
            else if (id(profile_current_step) == id(profile_steps_count)) {
              // Profile was already completed before reboot
              ESP_LOGD("beer_profile", "Restored completed profile state after reboot");
              id(beer_profile_step).publish_state("Profile complete");
              id(profile_step_remaining_time).publish_state("Complete");
            }
          }
          
          // Update status text
          char status_buffer[64];
          if (found_step) {
            sprintf(status_buffer, "Active - Step %d of %d", id(profile_current_step) + 1, id(profile_steps_count));
          } else {
            sprintf(status_buffer, "Profile complete");
          }
          id(beer_profile_status).publish_state(status_buffer);
          
          // Format and update elapsed time display
          char time_buffer[64];
          uint32_t days = elapsed_seconds / 86400;
          uint32_t remaining = elapsed_seconds % 86400;
          uint32_t hours = remaining / 3600;
          remaining = remaining % 3600;
          uint32_t minutes = remaining / 60;
          
          if (days > 0) {
            sprintf(time_buffer, "%dd %dh %dm", days, hours, minutes);
          } else if (hours > 0) {
            sprintf(time_buffer, "%dh %dm", hours, minutes);
          } else {
            sprintf(time_buffer, "%dm", minutes);
          }
          
          id(profile_elapsed_time).publish_state(time_buffer);
          
          // Publish the pre-generated compact JSON
          if (!id(profile_compact_json).empty()) {
            id(beer_profile_chart_data).publish_state(id(profile_compact_json));
            ESP_LOGD("beer_profile", "Published stored compact profile JSON");
          }

# Run profile calculation regularly
interval:
  - interval: 60s
    then:
      - script.execute: calculate_beer_profile
   
# Text sensor to show current profile status
text_sensor:
  - platform: template
    name: "Beer Profile Status"
    id: beer_profile_status
    
  - platform: template
    name: "Beer Profile Current Step"
    id: beer_profile_step
    
  - platform: template
    name: "Beer Profile Elapsed Time"
    id: profile_elapsed_time
    icon: "mdi:clock-outline"
    
  - platform: template
    name: "Beer Profile Step Remaining Time"
    id: profile_step_remaining_time
    icon: "mdi:clock-end"
    
  - platform: template
    name: "Beer Profile Chart Data"
    id: beer_profile_chart_data
    icon: "mdi:chart-line"
    update_interval: 60s  # Ensure regular updates
